---
layout: post
title: "Pexの内部構成の簡単な解説"
date: 2014-04-17 12:27
comments: 
categories: 
author: fumiya_chiba
permalink: archives/1001805200.html
---

Pex(<a  href="https://github.com/PexJS/PexJS" target="_blank">https://github.com/PexJS/PexJS</a>)がオープンソースになりました。 前身のExGameの時代から <a  href="https://twitter.com/tkihira" target="_blank">@tkihira</a>と一緒にずっと開発してきたプロダクトなので、大変感慨深いです。今はプロジェクトを離れ別なプロダクトの仕事をしているのですが、まだ私の書いたコードが多少残っているようです（糞コードがあれば何割かぐらいの確率で私の責任です）。<br /><br />出力されるpex.jsは約9000行で、一人で全体を把握できる規模のプロダクトだと思います。しかし、クラス名がなかなか独特だったりして、初見では全体像がなかなか掴みづらいと思いますので、簡単に全体の構成を解説してみたいと思います。<br /><br /><b>前提知識<br /></b>最低限、SWFファイルのバイナリフォーマットを理解していることが必要です。知らない方は、こちら <a  href="http://labs.gree.jp/blog/2011/01/2353/" target="_blank">http://labs.gree.jp/blog/2011/01/2353/</a> の「SWFバイナリ編集のススメ」シリーズがわかりやすいので目を通しておくことをお勧めします。<br /><br />また、WF勉強会#2(<a  href="http://gihyo.jp/news/report/2012/09/2801" target="_blank">http://gihyo.jp/news/report/2012/09/2801</a>)での @tkihira の講演はPexの実装を念頭においたものなので、こちらもソースを理解する助けになるかと思います。ちょっと長いですがgihyo記事中からUStreamへのリンクがあります。<br /><br /><b>ビルド方法<br /></b>README.mdにある通り、jakeを実行すると、output/pex.js に出力されます。このpex.jsは、build/jsset/normal.txt に書かれているファイルを、その順番通りに連結したものになっています。#で始まる行はコメントなので、src以下に存在するいくつかのファイルは利用されません。<br /><br />注）ちなみに、このjssetを切り替えることでモジュールを差し替えることができます。例えば jake jsset=hogeとして実行すると build/jsset/hoge.txt が読み込まれるようになります。<br /><br /><br /><b>各ファイル/クラスの役割<br /></b>build/jsset/normal.txtに書かれている順に、ファイルに含まれる内容をみていきます。<br /><br />header.js<br />&nbsp;&nbsp; &nbsp;全体のヘッダーとログ出力関数などの定義<br />option.js<br />&nbsp;&nbsp; &nbsp;ランタイムに渡すオプションのデフォルト値の定義<br />define.js<br />&nbsp;&nbsp; &nbsp;SWFバイナリ中で使われている定数値の定義<br />util.js<br />&nbsp;&nbsp; &nbsp;各種ユーティリティ<br />master.js<br />&nbsp;&nbsp; &nbsp;Masterクラスの定義。１つのHTMLページで複数のSWFを同時に再生できるのですが、１つ１つの再生用インスタンスがEngine（次項）で、それら全体を管理するためのものがMasterです。<br />&nbsp;&nbsp; &nbsp;SWFバイナリのparse処理はMasterから呼び出します。仮に同じSWFを複数再生する場合はここでparse結果をキャッシュしています。各Engineの同期をとるため、タイマーのループはMasterクラス中に含まれています。<br />engine.js<br />&nbsp;&nbsp; &nbsp;Engineクラスの定義。１つの再生用インスタンスを表します。各ムービークリップの状態を1フレーム進めるためのtick関数があり、前半でオブジェクトの位置や大きさを更新、後半でその結果をもとに描画ルーチン（後述のRenderer）を呼び出します。<br />analyzer.js<br />&nbsp;&nbsp; &nbsp;Analyzerクラスの定義。SWFバイナリをparseした結果は、単純にSWFバイナリをJSのオブジェクトに転写しただけに近い状態で、そのままでは実行できません。parse結果を解析しどのフレームでどのムービークリップが生成・消滅されるかなどの解析を行います。<br />movieclip.js<br />&nbsp;&nbsp; &nbsp;MovieClipクラスの定義。ムービークリップのインスタンスを表します。<br />movieclipinfo.js<br />&nbsp;&nbsp; &nbsp;MovieClipInfoクラスの定義。ムービークリップの定義を表します。Analyzerの解析結果がここに格納されています。この情報をもとにMovieClipが生成されます。（MovieClipInfoとMovieClipの関係は、クラスとそのインスタンスのようなものです）<br />vm.js<br />&nbsp;&nbsp; &nbsp;VMクラスの定義。ActionScriptのVMです。<br />api.js<br />&nbsp;&nbsp; &nbsp;APIクラスの定義。外部から実行を操作するためのAPIです。<br />profile.js<br />&nbsp;&nbsp; &nbsp;開発用のプロファイラ。ちなみに if(develop) { ... } で囲まれた箇所はminifyをかけると消えるようになっています。<br />touch.js<br />&nbsp;&nbsp; &nbsp;Touch クラスの定義。タッチ操作用のユーティリティです。<br />renderer/<br />&nbsp;&nbsp; &nbsp;rendererには描画用のクラスが含まれます<br />renderer/util_render.js<br />&nbsp;&nbsp; &nbsp;描画用ユーティリティです。行列計算や色の加算・乗算用の関数などが定義されています。<br />renderer/cache_controller.js<br />&nbsp;&nbsp; &nbsp;CacheControllerクラスの定義。描画結果をキャッシュするためのクラスです。<br />renderer/general_renderer.js<br />&nbsp;&nbsp; &nbsp;Rendererクラスの定義。デフォルトの描画ルーチンで、愚直に描画します。ここでは、ムービークリップなどのオブジェクトツリーのレイヤーを処理しており、末端のオブジェクトの描画はdraw_function_factory.jsで生成された描画関数を呼び出します。<br />renderer/dirtyrect_renderer.js<br />&nbsp;&nbsp; &nbsp;DirtyRectRendererクラスの定義。初期化オプションを指定することでRendererと差し替えて利用します。各オブジェクトの重なりと変化を計算し、再描画の必要のある箇所だけを描画します。一般的にはこちらの方が高速に動作しますが、全画面が再描画されるような動きの激しいSWFの場合はオーバーヘッドの分Rendererのほうが速いこともあります。<br />renderer/draw_function_factory.js<br />&nbsp;&nbsp; &nbsp;シェイプなどの一連の描画命令を１つのFunctionとしてコンパイルするための関数。使っているテクニックについては http://www.slideshare.net/takuokihira/html5-conference-2013 プレビュー の P21参照。<br />parser/<br />&nbsp;&nbsp; &nbsp;SWFのバイナリをJSのデータ構造に落とし込むためのクラス群が含まれます。<br />parser/utils_binary.js<br />&nbsp;&nbsp; &nbsp;ビット演算やSWFのデータ構造を扱うためのユーティリティ関数<br />parser/utils_tag.js<br />&nbsp;&nbsp; &nbsp;タグの中身を遅延評価させるためのユーティリティ関数<br />parser/utils_sjis.js<br />&nbsp;&nbsp; &nbsp;SJIS処理用のユーティリティ関数<br />parser/utils_support.js<br />&nbsp;&nbsp; &nbsp;たぶんデバッグ用の関数<br />parser/loader.js<br />&nbsp;&nbsp; &nbsp;SWFを外のURLから取得するための関数<br />parser/parser.js<br />&nbsp;&nbsp; &nbsp;Parserクラス<br />parser/tag_*.js<br />&nbsp;&nbsp; &nbsp;SWFのタグを表すクラス。<br />parser/image_manager.js<br />&nbsp;&nbsp; &nbsp;バイナリで格納されているラスター画像を展開するためのクラス。<br />parser/inflate.min.js<br />&nbsp;&nbsp; &nbsp;@imayaさん作zlibライブラリ。lossless画像展開用。<br />footer.js<br />&nbsp;&nbsp; &nbsp;フッター。header.jsで中括弧を開きっぱなしにしているので、ここで閉じる。<br /><br /><br />理解するのが難しいのはMasterとEngineの関係、MovieClipとMovieClipInfoの関係、rendererの役割分担あたりでしょうか。クラス名を見て役割がぱっと分かればいいんですが…。そのへんの命名がいけてないのは @tkihira 先生に苦情を！<br /><br />（もしかしたら続く）

